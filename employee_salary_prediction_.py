# -*- coding: utf-8 -*-
"""Employee Salary Prediction.. .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u1paXw7t_81La69yc_Z6CF-6_MmowYHg
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import joblib
from pyngrok import ngrok
import os

df = pd.read_csv("adult 3.csv")

df.head()

df.replace(' ?', pd.NA, inplace=True)
df.dropna(inplace=True)

X = df.drop("income", axis=1)
y = df["income"]

categorical_cols = X.select_dtypes(include='object').columns.tolist()
numeric_cols = X.select_dtypes(include='int64').columns.tolist()

preprocessor = ColumnTransformer([
    ("num", StandardScaler(), numeric_cols),
    ("cat", OneHotEncoder(handle_unknown='ignore'), categorical_cols)
])

models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Random Forest": RandomForestClassifier(),
    "KNN": KNeighborsClassifier(),
    "SVC": SVC(),
    "Gradient Boosting": GradientBoostingClassifier()
}

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

results = {}
for name, model in models.items():
    pipe = Pipeline(steps=[('pre', preprocessor), ('model', model)])
    pipe.fit(X_train, y_train)
    preds = pipe.predict(X_test)
    acc = accuracy_score(y_test, preds)
    results[name] = acc
    print(f"{name} Accuracy: {acc:.4f}")

plt.figure(figsize=(8, 5))
plt.bar(results.keys(), results.values(), color='skyblue')
plt.ylabel("Accuracy")
plt.title("Model Comparison")
plt.xticks(rotation=15)
plt.show()

best_model_name = max(results, key=results.get)
print(f"\nBest model: {best_model_name} with accuracy {results[best_model_name]:.4f}")

best_model = Pipeline(steps=[('pre', preprocessor), ('model', models[best_model_name])])
best_model.fit(X, y)
joblib.dump(best_model, "salary_model.pkl")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# model = joblib.load("salary_model.pkl")
# 
# st.title("Employee Salary Prediction App")
# st.write("This app predicts whether an employee earns >50K or <=50K per year.")
# 
# def user_input():
#     age = st.number_input("Age", 18, 100, 30)
#     workclass = st.selectbox("Workclass", ['Private', 'Self-emp-not-inc', 'Local-gov', 'State-gov', 'Federal-gov', 'Self-emp-inc', 'Without-pay'])
#     fnlwgt = st.number_input("Final Weight (FNLWGT)", 10000, 1000000, 200000)
#     education = st.selectbox("Education", ['Bachelors', 'HS-grad', '11th', 'Masters', '9th', 'Some-college', 'Assoc-acdm', 'Assoc-voc'])
#     edu_num = st.number_input("Education Number", 1, 16, 9)
#     marital_status = st.selectbox("Marital Status", ['Never-married', 'Married-civ-spouse', 'Divorced'])
#     occupation = st.selectbox("Occupation", ['Tech-support', 'Craft-repair', 'Other-service', 'Sales', 'Exec-managerial', 'Prof-specialty'])
#     relationship = st.selectbox("Relationship", ['Wife', 'Own-child', 'Husband', 'Not-in-family', 'Unmarried'])
#     race = st.selectbox("Race", ['White', 'Black', 'Asian-Pac-Islander', 'Amer-Indian-Eskimo', 'Other'])
#     gender = st.selectbox("Gender", ['Male', 'Female'])
#     capital_gain = st.number_input("Capital Gain", 0, 99999, 0)
#     capital_loss = st.number_input("Capital Loss", 0, 99999, 0)
#     hours = st.number_input("Hours-per-week", 1, 99, 40)
#     country = st.selectbox("Native Country", ['United-States', 'India', 'Mexico', 'Philippines'])
# 
#     data = {
#         'age': age, 'workclass': workclass, 'fnlwgt': fnlwgt, 'education': education,
#         'educational-num': edu_num, 'marital-status': marital_status,
#         'occupation': occupation, 'relationship': relationship, 'race': race,
#         'gender': gender, 'capital-gain': capital_gain, 'capital-loss': capital_loss,
#         'hours-per-week': hours, 'native-country': country
#     }
# 
#     return pd.DataFrame([data])
# 
# input_df = user_input()
# if st.button("Predict Salary"):
#     prediction = model.predict(input_df)[0]
#     st.success(f"Predicted Income Category:Â {prediction}")

!pip install streamlit pyngrok

!ngrok config add-authtoken "2zzXzZZybNjvlFmvIdsqg2wZJdh_3rEu1xygbe4tbzrGNhLNv"

!streamlit run app.py &

def run():
    os.system("streamlit run app.py --server.port 8501")

from pyngrok import ngrok

public_url = ngrok.connect("http://localhost:8501")
print("ðŸ”— Your app is live here:",public_url)